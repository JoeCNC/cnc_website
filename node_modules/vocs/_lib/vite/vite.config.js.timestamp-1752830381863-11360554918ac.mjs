// node_modules/vocs/_lib/vite/vite.config.js
import { basename as basename2 } from "node:path";
import { vanillaExtractPlugin } from "file:///home/ptngs/Git/cnc_website/node_modules/@vanilla-extract/vite-plugin/dist/vanilla-extract-vite-plugin.cjs.js";
import react from "file:///home/ptngs/Git/cnc_website/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig as defineConfig2, splitVendorChunkPlugin } from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";

// node_modules/vocs/_lib/vite/plugins/css.js
import { accessSync } from "node:fs";
import { resolve } from "node:path";
import { default as autoprefixer } from "file:///home/ptngs/Git/cnc_website/node_modules/autoprefixer/lib/autoprefixer.js";
import { default as tailwindcss } from "file:///home/ptngs/Git/cnc_website/node_modules/tailwindcss/lib/index.js";
import { default as tailwindcssNesting } from "file:///home/ptngs/Git/cnc_website/node_modules/tailwindcss/nesting/index.js";
function css() {
  return {
    name: "css",
    async config() {
      const tailwindConfig = findTailwindConfig();
      return {
        css: {
          postcss: {
            plugins: [
              autoprefixer(),
              tailwindcssNesting(),
              tailwindConfig ? tailwindcss() : null
            ].filter(Boolean)
          }
        }
      };
    }
  };
}
function findTailwindConfig() {
  const configFiles = [
    "./tailwind.config.js",
    "./tailwind.config.cjs",
    "./tailwind.config.mjs",
    "./tailwind.config.js"
  ];
  for (const configFile of configFiles) {
    try {
      const configPath = resolve(process.cwd(), configFile);
      accessSync(configPath);
      return configPath;
    } catch (err) {
    }
  }
  return null;
}

// node_modules/vocs/_lib/vite/plugins/mdx.js
import mdxPlugin from "file:///home/ptngs/Git/cnc_website/node_modules/@mdx-js/rollup/index.js";
import rehypeShiki, {} from "file:///home/ptngs/Git/cnc_website/node_modules/@shikijs/rehype/dist/index.mjs";
import { transformerNotationDiff, transformerNotationFocus, transformerNotationHighlight, transformerNotationWordHighlight } from "file:///home/ptngs/Git/cnc_website/node_modules/@shikijs/transformers/dist/index.mjs";
import { defaultTwoslashOptions as defaultTwoslashOptions_, transformerTwoslash } from "file:///home/ptngs/Git/cnc_website/node_modules/@shikijs/twoslash/dist/index.mjs";
import { h as h4 } from "file:///home/ptngs/Git/cnc_website/node_modules/hastscript/index.js";
import rehypeAutolinkHeadings from "file:///home/ptngs/Git/cnc_website/node_modules/rehype-autolink-headings/index.js";
import rehypeSlug from "file:///home/ptngs/Git/cnc_website/node_modules/rehype-slug/index.js";
import remarkDirective from "file:///home/ptngs/Git/cnc_website/node_modules/remark-directive/index.js";
import remarkFrontmatter from "file:///home/ptngs/Git/cnc_website/node_modules/remark-frontmatter/index.js";
import remarkGfm from "file:///home/ptngs/Git/cnc_website/node_modules/remark-gfm/index.js";
import remarkMdxFrontmatter from "file:///home/ptngs/Git/cnc_website/node_modules/remark-mdx-frontmatter/index.js";
import {} from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";

// node_modules/vocs/_lib/vite/utils/resolveVocsConfig.js
import { existsSync, readFileSync } from "node:fs";
import { resolve as resolve2 } from "node:path";
import toml from "file:///home/ptngs/Git/cnc_website/node_modules/toml/index.js";
import { loadConfigFromFile } from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";

// node_modules/vocs/_lib/config.js
async function defineConfig({ blogDir = "./pages/blog", font, head, ogImageUrl, rootDir = "docs", title = "Docs", titleTemplate = `%s \u2013 ${title}`, ...config }) {
  const basePath = parseBasePath(config.basePath);
  return {
    blogDir,
    font,
    head,
    ogImageUrl,
    rootDir,
    title,
    titleTemplate,
    ...config,
    basePath,
    banner: await parseBanner(config.banner ?? ""),
    iconUrl: parseImageUrl(config.iconUrl, {
      basePath
    }),
    logoUrl: parseImageUrl(config.logoUrl, {
      basePath
    }),
    markdown: parseMarkdown(config.markdown ?? {}),
    socials: parseSocials(config.socials ?? []),
    topNav: parseTopNav(config.topNav ?? []),
    theme: await parseTheme(config.theme ?? {}),
    vite: parseViteConfig(config.vite, {
      basePath
    })
  };
}
var getDefaultConfig = async () => await defineConfig({});
function parseBasePath(basePath_) {
  let basePath = basePath_;
  if (!basePath)
    return "";
  if (!basePath.startsWith("/"))
    basePath = `/${basePath}`;
  if (basePath.endsWith("/"))
    basePath = basePath.slice(0, -1);
  return basePath;
}
async function parseBanner(banner) {
  if (!banner)
    return void 0;
  const bannerContent = (() => {
    if (typeof banner === "string")
      return banner;
    if (typeof banner === "object" && "content" in banner)
      return banner.content;
    return void 0;
  })();
  const content = await (async () => {
    if (typeof bannerContent !== "string")
      return bannerContent;
    const { compile: compile2 } = await import("file:///home/ptngs/Git/cnc_website/node_modules/@mdx-js/mdx/index.js");
    const remarkGfm2 = (await import("file:///home/ptngs/Git/cnc_website/node_modules/remark-gfm/index.js")).default;
    return String(await compile2(bannerContent, {
      outputFormat: "function-body",
      remarkPlugins: [remarkGfm2]
    }));
  })();
  if (!content)
    return void 0;
  const textColor = await (async () => {
    if (typeof banner === "string")
      return void 0;
    if (typeof banner === "object") {
      if ("textColor" in banner)
        return banner.textColor;
      if ("backgroundColor" in banner && banner.backgroundColor) {
        const chroma = (await import("file:///home/ptngs/Git/cnc_website/node_modules/chroma-js/index.js")).default;
        return chroma.contrast(banner.backgroundColor, "white") < 4.5 ? "black" : "white";
      }
    }
    return void 0;
  })();
  return {
    height: "32px",
    ...typeof banner === "object" ? banner : {},
    content,
    textColor
  };
}
function parseImageUrl(imageUrl, { basePath }) {
  if (!imageUrl)
    return;
  if (process.env.NODE_ENV === "development")
    return imageUrl;
  if (typeof imageUrl === "string") {
    if (imageUrl.startsWith("http"))
      return imageUrl;
    return `${basePath}${imageUrl}`;
  }
  return {
    dark: imageUrl.dark.startsWith("http") ? imageUrl.dark : `${basePath}${imageUrl.dark}`,
    light: imageUrl.light.startsWith("http") ? imageUrl.light : `${basePath}${imageUrl.light}`
  };
}
function parseMarkdown(markdown) {
  return {
    ...markdown,
    code: {
      themes: {
        dark: "github-dark-dimmed",
        light: "github-light"
      },
      ...markdown.code
    }
  };
}
var socialsMeta = {
  discord: { label: "Discord", type: "discord" },
  github: { label: "GitHub", type: "github" },
  telegram: { label: "Telegram", type: "telegram" },
  x: { label: "X (Twitter)", type: "x" }
};
function parseSocials(socials) {
  return socials.map((social) => {
    return {
      icon: social.icon,
      link: social.link,
      ...socialsMeta[social.icon]
    };
  });
}
var id = 0;
function parseTopNav(topNav) {
  const parsedTopNav = [];
  for (const item of topNav) {
    parsedTopNav.push({
      ...item,
      id: id++,
      items: item.items ? parseTopNav(item.items) : []
    });
  }
  return parsedTopNav;
}
async function parseTheme(theme) {
  const chroma = (await import("file:///home/ptngs/Git/cnc_website/node_modules/chroma-js/index.js")).default;
  const accentColor = (() => {
    if (!theme.accentColor)
      return theme.accentColor;
    if (typeof theme.accentColor === "object" && !Object.keys(theme.accentColor).includes("light") && !Object.keys(theme.accentColor).includes("dark"))
      return theme.accentColor;
    const accentColor2 = theme.accentColor;
    const accentColorLight = typeof accentColor2 === "object" ? accentColor2.light : accentColor2;
    const accentColorDark = typeof accentColor2 === "object" ? accentColor2.dark : accentColor2;
    return {
      backgroundAccent: {
        dark: accentColorDark,
        light: accentColorLight
      },
      backgroundAccentHover: {
        dark: chroma(accentColorDark).darken(0.25).hex(),
        light: chroma(accentColorLight).darken(0.25).hex()
      },
      backgroundAccentText: {
        dark: chroma.contrast(accentColorDark, "white") < 4.5 ? "black" : "white",
        light: chroma.contrast(accentColorLight, "white") < 4.5 ? "black" : "white"
      },
      borderAccent: {
        dark: chroma(accentColorDark).brighten(0.5).hex(),
        light: chroma(accentColorLight).darken(0.25).hex()
      },
      textAccent: {
        dark: accentColorDark,
        light: accentColorLight
      },
      textAccentHover: {
        dark: chroma(accentColorDark).darken(0.5).hex(),
        light: chroma(accentColorLight).darken(0.5).hex()
      }
    };
  })();
  return {
    ...theme,
    accentColor
  };
}
function parseViteConfig(viteConfig, { basePath }) {
  return {
    ...viteConfig,
    base: basePath
  };
}

// node_modules/vocs/_lib/vite/utils/resolveVocsConfig.js
var moduleExtensions = ["js", "jsx", "ts", "tsx", "mjs", "mts"];
var staticExtensions = ["toml", "json"];
var extensions = [...moduleExtensions, ...staticExtensions];
var defaultConfigPaths = [".vocs/config", "vocs.config", "Vocs"];
async function resolveVocsConfig(parameters = {}) {
  const { command = "serve", mode = "development" } = parameters;
  const [configPath, ext] = (() => {
    for (const ext2 of extensions) {
      if (parameters.configPath)
        return parameters.configPath;
      for (const filePath of defaultConfigPaths)
        if (existsSync(resolve2(process.cwd(), `${filePath}.${ext2}`)))
          return [`${filePath}.${ext2}`, ext2];
    }
    return [void 0, void 0];
  })();
  const result = await (async () => {
    if (!ext)
      return;
    if (moduleExtensions.includes(ext))
      return await loadConfigFromFile({ command, mode }, configPath);
    if (staticExtensions.includes(ext)) {
      const file = readFileSync(configPath, "utf8");
      const rawConfig = (() => {
        if (ext === "toml")
          return camelCaseKeys(toml.parse(file));
        if (ext === "json")
          return JSON.parse(file);
        return;
      })();
      const config2 = await defineConfig(rawConfig);
      return config2 ? { config: config2 } : void 0;
    }
    return;
  })();
  const config = result ? result.config : await getDefaultConfig();
  return {
    config,
    configPath
  };
}
function camelCaseKeys(obj) {
  if (typeof obj !== "object")
    return obj;
  if (Array.isArray(obj))
    return obj.map(camelCaseKeys);
  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [
    key.replace(/[-_](.)/g, (_, c) => c.toUpperCase()),
    camelCaseKeys(value)
  ]));
}

// node_modules/vocs/_lib/vite/plugins/rehype/display-shiki-notation.js
import { visit } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function rehypeShikiDisplayNotation() {
  return (tree) => {
    visit(tree, "text", (node) => {
      if (node.value.includes("//$"))
        node.value = node.value.replace("//$", "//");
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/rehype/inline-shiki.js
import { bundledLanguages, getHighlighter } from "file:///home/ptngs/Git/cnc_website/node_modules/shiki/dist/index.mjs";
import { visit as visit2 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
var inlineShikiRegex = /(.*){:(.*)}$/;
var rehypeInlineShiki = function(options = {}) {
  const themeNames = ("themes" in options ? Object.values(options.themes) : [options.theme]).filter(Boolean);
  const langs = options.langs || Object.keys(bundledLanguages);
  let promise;
  return async function(tree) {
    if (!promise)
      promise = getHighlighter({
        themes: themeNames,
        langs
      });
    const highlighter = await promise;
    return visit2(tree, "element", (node, index, parent) => {
      if (node.tagName !== "code")
        return;
      const match = node.children[0]?.value?.match(inlineShikiRegex);
      if (!match)
        return;
      const [, code, lang] = match;
      const hast = highlighter.codeToHast(code, { ...options, lang });
      const inlineCode = hast.children[0].children[0];
      if (!inlineCode)
        return;
      parent?.children.splice(index ?? 0, 1, inlineCode);
    });
  };
};

// node_modules/vocs/_lib/vite/plugins/remark/authors.js
import { visit as visit3 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkAuthors() {
  return (tree) => {
    visit3(tree, (node, index, parent) => {
      if (node.type !== "leafDirective")
        return;
      if (node.name !== "authors")
        return;
      if (!index)
        return;
      (parent?.children[index - 1]).children.push({
        type: "paragraph",
        data: {
          hName: "div",
          hProperties: { "data-authors": true }
        }
      });
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/blog-posts.js
import { visit as visit4 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkBlogPosts() {
  return (tree) => {
    visit4(tree, (node) => {
      if (node.type !== "leafDirective")
        return;
      if (node.name !== "blog-posts")
        return;
      const data = node.data || (node.data = {});
      data.hName = "div";
      data.hProperties = { "data-blog-posts": true };
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/callout.js
import { h } from "file:///home/ptngs/Git/cnc_website/node_modules/hastscript/index.js";
import { visit as visit5 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkCallout() {
  return (tree) => {
    visit5(tree, (node) => {
      if (node.type !== "containerDirective")
        return;
      if (node.name !== "callout" && node.name !== "info" && node.name !== "warning" && node.name !== "danger" && node.name !== "tip" && node.name !== "success" && node.name !== "note")
        return;
      const label = node.children.find((child) => child.data?.directiveLabel)?.children[0].value;
      const data = node.data || (node.data = {});
      const tagName = "aside";
      if (label) {
        node.children = node.children.filter((child) => !child.data?.directiveLabel);
        node.children.unshift({
          type: "paragraph",
          data: { hProperties: { "data-callout-title": true } },
          children: [
            {
              type: "strong",
              children: [{ type: "text", value: label }]
            }
          ]
        });
      }
      data.hName = tagName;
      data.hProperties = {
        ...h(tagName, node.attributes || {}).properties,
        "data-callout": node.name !== "callout" ? node.name : true
      };
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/code-group.js
import { h as h2 } from "file:///home/ptngs/Git/cnc_website/node_modules/hastscript/index.js";
import { visit as visit6 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkCodeGroup() {
  return (tree) => {
    visit6(tree, (node) => {
      if (node.type !== "containerDirective")
        return;
      if (node.name !== "code-group")
        return;
      const data = node.data || (node.data = {});
      const tagName = "div";
      node.attributes = {
        ...node.attributes,
        class: "code-group"
      };
      data.hName = tagName;
      data.hProperties = h2(tagName, node.attributes || {}).properties;
      node.children = node.children.map((child) => {
        const match = "meta" in child && child?.meta?.match(/\[(.*)\]/);
        return {
          type: "paragraph",
          children: [child],
          data: {
            hName: "div",
            hProperties: match ? {
              "data-title": match[1]
            } : void 0
          }
        };
      }).filter(Boolean);
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/code.js
import { visit as visit7 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkCode() {
  return (tree) => {
    visit7(tree, (node, _, parent) => {
      if (node.type !== "code")
        return;
      if (!node.lang)
        node.lang = "txt";
      if (parent?.type === "containerDirective" && parent.name !== "steps")
        return;
      const [match, title] = node.meta?.match(/\[(.*)\]/) || [];
      if (match)
        node.meta = node.meta?.replace(match, `title="${title}"`);
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/details.js
import { visit as visit8 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkDetails() {
  return (tree) => {
    visit8(tree, (node) => {
      if (node.type !== "containerDirective")
        return;
      if (node.name !== "details")
        return;
      const data = node.data || (node.data = {});
      const tagName = "details";
      const summaryChild = node.children[0];
      if (summaryChild.type === "paragraph" && summaryChild.data?.directiveLabel)
        summaryChild.data.hName = "summary";
      else
        node.children.unshift({
          type: "paragraph",
          children: [{ type: "text", value: "Details" }],
          data: { hName: "summary" }
        });
      data.hName = tagName;
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/filename.js
import { visit as visit9 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";

// node_modules/vocs/_lib/vite/plugins/shiki/transformerNotationInclude.js
import { readFileSync as readFileSync2 } from "node:fs";
import { resolve as resolve3 } from "node:path";
var includeRegex = /\/\/ \[!include (.*)\]/;
var regionRegex = /\/\/ \[!region (.*)\]/;
var regionRegexLineGlobal = /\/\/ \[!region (.*)\]\n/g;
var endRegionRegex = /\/\/ \[!endregion (.*)\]/;
var endRegionRegexLineGlobal = /\/\/ \[!endregion (.*)\](\n|$)/g;
var transformerNotationInclude = ({ rootDir }) => ({
  name: "includes",
  preprocess(code) {
    if (!code)
      return code;
    return processIncludes({
      code,
      getSource(fileName) {
        if (!fileName.startsWith("~"))
          return void 0;
        const path = resolve3(rootDir, fileName.replace("~", "."));
        return readFileSync2(path, { encoding: "utf-8" }).replace(/\n$/, "");
      }
    });
  }
});
function processIncludes({ code, getSource }) {
  const includes = code.includes("// [!include");
  if (!includes)
    return code.replaceAll(regionRegexLineGlobal, "").replaceAll(endRegionRegexLineGlobal, "").replace(/\n$/, "");
  const lines = code.split("\n");
  let i = 0;
  while (i < lines.length) {
    const line = lines[i];
    const match = line.match(includeRegex);
    if (match) {
      const [, value] = match;
      const [file, ...query] = value.split(" ");
      const [fileName, region] = file.split(":");
      let contents = getSource(fileName);
      if (contents === void 0) {
        i++;
        continue;
      }
      contents = extractRegion(contents, region);
      contents = findAndReplace(contents, query);
      lines.splice(i, 1, contents);
    }
    i++;
  }
  return lines.join("\n").replace(/\n$/, "");
}
function extractRegion(code, region) {
  const lines = [];
  let inRegion = !region;
  for (const line of code.split("\n")) {
    const startRegionMatch = line.match(regionRegex);
    const endRegionMatch = line.match(endRegionRegex);
    if (inRegion && !startRegionMatch && !endRegionMatch)
      lines.push(line.replaceAll(/_\$\d*/g, ""));
    else if (startRegionMatch) {
      const [, regionName] = startRegionMatch;
      if (regionName === region) {
        inRegion = true;
      }
    } else if (endRegionMatch) {
      const [, regionName] = endRegionMatch;
      if (regionName === region) {
        inRegion = false;
      }
    }
  }
  return lines.join("\n");
}
var findAndReplaceRegex = /^\/(.*)([^\\])\/(.*)\/$/;
function findAndReplace(code_, queries) {
  if (queries.length === 0)
    return code_;
  let code = code_;
  for (const query of queries) {
    const match = query.match(findAndReplaceRegex);
    if (!match)
      return code;
    const [, find1, find2, replace1] = match;
    const find = (find1 + find2).replace("\\/", "/");
    const replace = replace1.replace("\\/", "/");
    code = code.replaceAll(find, replace);
  }
  return code;
}

// node_modules/vocs/_lib/vite/plugins/remark/filename.js
var filenameRegex = /filename="(.*)"/;
var importRegex = /from ('|")(.*)('|")/g;
function remarkFilename() {
  return (tree) => {
    visit9(tree, (node) => {
      if (node.type === "code" && node.meta?.includes("filename")) {
        const filenameMatch = node.meta?.match(filenameRegex);
        if (filenameMatch) {
          const [, fileName] = filenameMatch;
          const sourceCode = node.value;
          visit9(tree, "code", (node2) => {
            if (node2.meta?.includes("twoslash")) {
              node2.value = processImports({
                code: node2.value,
                fileName,
                sourceCode
              });
            }
            node2.value = processIncludes({
              code: node2.value,
              getSource: (sourceFileName) => sourceFileName === fileName ? sourceCode : void 0
            });
          });
        }
      }
    });
  };
}
function processImports({ code: code_, fileName, sourceCode }) {
  let code = code_;
  const importMatches = code.matchAll(importRegex);
  for (const importMatch of importMatches) {
    const strippedFileName = stripFileName(fileName);
    const strippedSourceFileName = stripFileName(importMatch?.[2]);
    if (strippedSourceFileName !== strippedFileName)
      continue;
    const previous = code;
    code = `// @filename: ${fileName}
${sourceCode}
`;
    if (!previous.includes("@filename: example.js"))
      code += "// @filename: example.js\n// ---cut---\n";
    code += previous;
  }
  return code;
}
function stripFileName(fileName) {
  return fileName.replace(/^\.\//, "").replace(/\.(ts|js|tsx|jsx)$/, "");
}

// node_modules/vocs/_lib/vite/plugins/remark/inferred-frontmatter.js
import { visit as visit10 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkInferFrontmatter() {
  return (tree) => {
    visit10(tree, (node, _, parent) => {
      if (parent?.type !== "root")
        return;
      if (node.type === "heading" && node.depth === 1) {
        if (node.children.length === 0)
          return;
        const child = node.children[0];
        if (!("value" in child))
          return;
        const value = child.value;
        const [, title, description] = value.includes("[") ? value.match(/(.*) \[(.*)\]/) || [] : [void 0, value];
        const frontmatterIndex = parent.children.findIndex((child2) => child2.type === "yaml");
        const index = frontmatterIndex > 0 ? frontmatterIndex : 0;
        const frontmatter = {
          ...parent.children[frontmatterIndex] || {
            value: "",
            type: "yaml"
          }
        };
        if (!frontmatter.value.includes("title"))
          frontmatter.value += `
title: ${title}
`;
        if (!frontmatter.value.includes("description"))
          frontmatter.value += `
description: ${description}
`;
        if (frontmatterIndex === -1)
          tree.children.unshift(frontmatter);
        else
          parent.children.splice(index, 1, frontmatter);
      }
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/links.js
import { dirname, resolve as resolve4 } from "node:path";
import { fileURLToPath } from "node:url";
import { default as fs } from "file:///home/ptngs/Git/cnc_website/node_modules/fs-extra/lib/index.js";
import { globbySync } from "file:///home/ptngs/Git/cnc_website/node_modules/globby/index.js";
import { visit as visit11 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
import { createLogger } from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";
var __vite_injected_original_import_meta_url = "file:///home/ptngs/Git/cnc_website/node_modules/vocs/_lib/vite/plugins/remark/links.js";
var __dirname = dirname(fileURLToPath(__vite_injected_original_import_meta_url));
var deadlinksPath = resolve4(__dirname, "../../.vocs/cache/deadlinks.json");
var logger = createLogger("info");
if (fs.existsSync(deadlinksPath))
  fs.removeSync(deadlinksPath);
function remarkLinks() {
  const deadlinks = /* @__PURE__ */ new Set();
  return async (tree, file) => {
    const { config } = await resolveVocsConfig();
    const { rootDir } = config;
    visit11(tree, "link", (node) => {
      const filePath = file.history[0];
      if (!filePath)
        return;
      const directory = dirname(filePath);
      const isExternalLink = !node.url.match(/^(\.*\/|#)/);
      if (isExternalLink)
        return;
      if (node.url.startsWith("#"))
        return;
      const [url, after] = (node.url || "").split("#");
      const [pagePath, baseDir] = (() => {
        if (url.startsWith("."))
          return [resolve4(directory, url), directory];
        return [resolve4(rootDir, `./pages${url}`), resolve4(rootDir, "./pages")];
      })();
      const isFile = (() => {
        try {
          return fs.statSync(pagePath).isFile();
        } catch {
          return false;
        }
      })();
      if (isFile) {
        node.url = parseLink(pagePath, baseDir);
        return;
      }
      const [resolvedPagePath] = globbySync([
        `${pagePath}/index.{html,md,mdx,js,jsx,ts,tsx}`,
        `${pagePath}.{html,md,mdx,js,jsx,ts,tsx}`
      ]);
      if (!resolvedPagePath) {
        deadlinks.add([node.url, filePath]);
        fs.ensureDirSync(resolve4(__dirname, "../../.vocs/cache"));
        fs.writeFileSync(deadlinksPath, JSON.stringify([...deadlinks], null, 2));
        if (process.env.NODE_ENV === "development")
          logger.warn(`could not resolve URL "${node.url}" in ${filePath}
`, { timestamp: true });
        return;
      }
      node.url = `${parseLink(resolvedPagePath, baseDir)}${after ? `#${after}` : ""}`;
    });
  };
}
function parseLink(pagePath, baseDir) {
  return pagePath.replace(baseDir, "").replace(/((index)?\.(html|md|mdx|js|jsx|ts|tsx))$/, "").replace(/\/$/, "");
}

// node_modules/vocs/_lib/vite/plugins/remark/sponsors.js
import { visit as visit12 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkSponsors() {
  return (tree) => {
    visit12(tree, (node, index, parent) => {
      if (node.type !== "leafDirective")
        return;
      if (node.name !== "sponsors")
        return;
      if (!index)
        return;
      (parent?.children[index]).children.push({
        type: "paragraph",
        data: {
          hName: "div",
          hProperties: { "data-sponsors": true }
        }
      });
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/steps.js
import { h as h3 } from "file:///home/ptngs/Git/cnc_website/node_modules/hastscript/index.js";
import { visit as visit13 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkSteps() {
  return (tree) => {
    visit13(tree, (node) => {
      if (node.type !== "containerDirective")
        return;
      if (node.name !== "steps")
        return;
      const data = node.data || (node.data = {});
      const tagName = "div";
      node.attributes = {
        ...node.attributes,
        "data-vocs-steps": "true"
      };
      data.hName = tagName;
      data.hProperties = h3(tagName, node.attributes || {}).properties;
      const depth = node.children.find((child) => child.type === "heading")?.depth ?? 2;
      let currentChild;
      const children = [];
      for (const child of node.children) {
        if (child.type === "heading" && child.depth === depth) {
          if (currentChild && currentChild.children.length > 0)
            children.push(currentChild);
          currentChild = {
            type: "paragraph",
            children: [],
            data: {
              hName: "div",
              hProperties: {
                "data-depth": depth
              }
            }
          };
        }
        currentChild.children.push(child);
      }
      children.push(currentChild);
      node.children = children;
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/strong-block.js
import { visit as visit14 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkStrongBlock() {
  return (tree) => {
    visit14(tree, "strong", (node, _, parent) => {
      if (!parent)
        return;
      if (parent.type !== "paragraph")
        return;
      if (parent.children.length > 1)
        return;
      parent.type = "strong";
      parent.children = node.children;
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/subheading.js
import { visit as visit15 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkSubheading() {
  return (tree) => {
    visit15(tree, "heading", (node, index, parent) => {
      if (!index)
        return;
      if (node.depth !== 1)
        return;
      if (node.children.length === 0)
        return;
      const subheadingRegex = / \[(.*)\]$/;
      const subheadingChild = node.children.find((child) => "value" in child && typeof child.value === "string" && child.value.match(subheadingRegex));
      const [match, subheading] = subheadingChild?.value?.match(subheadingRegex) ?? [];
      if (subheadingChild)
        subheadingChild.value = subheadingChild?.value?.replace(match, "");
      parent?.children.splice(index, 1);
      const header = {
        type: "paragraph",
        data: {
          hName: "header"
        },
        children: [
          node,
          subheading ? {
            type: "paragraph",
            children: [{ type: "text", value: subheading }],
            data: {
              hName: "div",
              hProperties: {
                role: "doc-subtitle"
              }
            }
          } : void 0
        ].filter(Boolean)
      };
      parent?.children.splice(index, 0, header);
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/remark/twoslash.js
import { visit as visit16 } from "file:///home/ptngs/Git/cnc_website/node_modules/unist-util-visit/index.js";
function remarkTwoslash() {
  return (tree) => {
    visit16(tree, (node) => {
      if (node.type === "code") {
        node.value = node.value.replace(/(\/\/\s@.*:\s.*)\n(\/\/)/g, "$1\n\n$2").replace(/(\/\/\s@.*:\s.*)\n(\/\/)/g, "$1\n\n$2");
      }
    });
  };
}

// node_modules/vocs/_lib/vite/plugins/shiki/transformerEmptyLine.js
var transformerEmptyLine = () => ({
  name: "empty-line",
  line(hast) {
    const child = hast.children[0];
    if (child)
      return;
    hast.properties["data-empty-line"] = true;
    hast.children = [
      {
        type: "text",
        value: " "
      }
    ];
  }
});

// node_modules/vocs/_lib/vite/plugins/shiki/transformerLineNumbers.js
var transformerLineNumbers = () => ({
  name: "line-numbers",
  code(hast) {
    if (!this.options.meta?.__raw?.includes("showLineNumbers"))
      return;
    hast.properties["data-line-numbers"] = true;
  }
});

// node_modules/vocs/_lib/vite/plugins/shiki/transformerSplitIdentifiers.js
var transformerSplitIdentifiers = () => ({
  name: "split-identifiers",
  span(hast) {
    if (!this.meta.twoslash)
      return;
    const child = hast.children[0];
    if (child.type !== "text")
      return;
    if (child.value.trim().length === 0)
      return;
    if (child.value.match(/\/\/ \[!/))
      return;
    let identifier = false;
    let item = "";
    const items = [];
    for (const char of child.value) {
      if (char.match(/\w/)) {
        if (!identifier) {
          items.push(item);
          item = "";
        }
        identifier = true;
        item += char;
      } else if (char.match(/\W/)) {
        if (identifier) {
          items.push(item);
          item = "";
        }
        identifier = false;
        item += char;
      }
    }
    if (item)
      items.push(item);
    hast.children = items.map((item2) => ({ type: "text", value: item2 }));
  }
});

// node_modules/vocs/_lib/vite/plugins/shiki/transformerTagLine.js
var transformerTagLine = () => ({
  name: "tag-line",
  root(hast) {
    const lines = hast.children[0]?.children[0]?.children;
    if (!lines)
      return;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.properties?.class.includes("twoslash-tag-line")) {
        lines.splice(i - 1, 0, line);
        lines.splice(i + 1, 1);
        if (i + 1 === lines.length)
          lines.splice(i, 1);
      }
    }
  }
});

// node_modules/vocs/_lib/vite/plugins/shiki/transformerTitle.js
var titleRegex = /title="(.*)"|\[(.*)\]/;
var transformerTitle = () => ({
  name: "title",
  root(hast) {
    const titleMatch = this.options.meta?.__raw?.match(titleRegex);
    if (!titleMatch)
      return;
    const title = titleMatch[1] || titleMatch[2];
    const child = hast.children[0];
    hast.children = [
      {
        ...child,
        properties: {
          ...child.properties,
          "data-title": title,
          "data-lang": this.options.lang
        }
      }
    ];
  }
});

// node_modules/vocs/_lib/vite/plugins/shiki/twoslashRenderer.js
import { fromMarkdown } from "file:///home/ptngs/Git/cnc_website/node_modules/mdast-util-from-markdown/index.js";
import { gfmFromMarkdown } from "file:///home/ptngs/Git/cnc_website/node_modules/mdast-util-gfm/index.js";
import { defaultHandlers, toHast } from "file:///home/ptngs/Git/cnc_website/node_modules/mdast-util-to-hast/index.js";

// node_modules/vocs/_lib/vite/plugins/shiki/transformerShrinkIndent.js
var transformerShrinkIndent = () => ({
  name: "indent",
  span(hast, _, __, lineElement) {
    const child = hast.children[0];
    if (child.type !== "text")
      return;
    if (!child.value)
      return;
    if (child.value.trim().length !== 0)
      return;
    if (lineElement.children.length !== 0)
      return;
    hast.children[0] = { type: "text", value: child.value.replace(/\s\s/g, " ") };
  }
});

// node_modules/vocs/_lib/vite/plugins/shiki/twoslashRenderer.js
function twoslashRenderer() {
  function hightlightPopupContent(codeToHast, shikiOptions, info) {
    if (!info.text)
      return [];
    const text = processHoverInfo(info.text) ?? info.text;
    if (!text.trim())
      return [];
    const themedContent = codeToHast(text, {
      ...shikiOptions,
      transformers: [transformerShrinkIndent()]
    }).children[0].children[0].children;
    if (info.docs) {
      const santized = info.docs.replace(/\n?{(@.*)?\s*\n?/g, "").replace(/\s*}\n?/g, "").replace(/(.)\n(.)/g, "$1 $2").replace(/\n?-\s/g, "\n");
      const mdast = fromMarkdown(santized, {
        mdastExtensions: [gfmFromMarkdown()]
      });
      const hast = toHast(mdast, {
        handlers: {
          code: (state, node) => {
            const lang = node.lang || "";
            if (lang) {
              return codeToHast(node.value, {
                ...shikiOptions,
                transformers: [],
                lang
              }).children[0];
            }
            return defaultHandlers.code(state, node);
          }
        }
      });
      if (info.docs) {
        themedContent.push({
          type: "element",
          tagName: "div",
          properties: { class: "twoslash-popup-jsdoc" },
          children: hast.children
        });
      }
    }
    return themedContent;
  }
  return {
    nodeStaticInfo(info, node) {
      const themedContent = hightlightPopupContent(this.codeToHast, this.options, info);
      if (!themedContent.length)
        return node;
      return {
        type: "element",
        tagName: "span",
        properties: {
          class: "twoslash-hover"
        },
        children: [
          {
            type: "element",
            tagName: "div",
            properties: {
              class: "twoslash-popup-info-hover"
            },
            children: themedContent
          },
          {
            type: "element",
            tagName: "span",
            properties: {
              class: "twoslash-target"
            },
            children: [node]
          }
        ]
      };
    },
    nodeQuery(info, node) {
      if (!info.text)
        return {};
      const themedContent = hightlightPopupContent(this.codeToHast, this.options, info);
      return {
        type: "element",
        tagName: "span",
        properties: {
          class: "twoslash-query-persisted"
        },
        children: [
          {
            type: "element",
            tagName: "span",
            properties: {
              class: "twoslash-popup-info"
            },
            children: [
              {
                type: "element",
                tagName: "div",
                properties: { class: "twoslash-popup-arrow" },
                children: []
              },
              {
                type: "element",
                tagName: "div",
                properties: { class: "twoslash-popup-scroll-container" },
                children: themedContent
              }
            ]
          },
          node
        ]
      };
    },
    nodeCompletion(query, node) {
      if (node.type !== "text")
        throw new Error(`[shiki-twoslash] nodeCompletion only works on text nodes, got ${node.type}`);
      const leftPart = query.completionsPrefix || "";
      const rightPart = node.value.slice(leftPart.length || 0);
      return {
        type: "element",
        tagName: "span",
        properties: {},
        children: [
          {
            type: "text",
            value: leftPart
          },
          {
            type: "element",
            tagName: "span",
            properties: {
              class: "twoslash-completion-cursor"
            },
            children: [
              {
                type: "element",
                tagName: "div",
                properties: {
                  class: "twoslash-completion-list"
                },
                children: query.completions.map((i) => ({
                  type: "element",
                  tagName: "div",
                  properties: {
                    class: "twoslash-completion-list-item"
                  },
                  children: [
                    {
                      type: "element",
                      tagName: "span",
                      properties: {
                        class: "kindModifiers" in i && typeof i.kindModifiers === "string" && i.kindModifiers?.split(",").includes("deprecated") ? "deprecated" : void 0
                      },
                      children: [
                        {
                          type: "element",
                          tagName: "span",
                          properties: { class: "twoslash-completions-matched" },
                          children: [
                            {
                              type: "text",
                              value: i.name.startsWith(query.completionsPrefix) ? query.completionsPrefix : ""
                            }
                          ]
                        },
                        {
                          type: "element",
                          tagName: "span",
                          properties: { class: "twoslash-completions-unmatched" },
                          children: [
                            {
                              type: "text",
                              value: i.name.startsWith(query.completionsPrefix) ? i.name.slice(query.completionsPrefix.length || 0) : i.name
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }))
              }
            ]
          },
          {
            type: "text",
            value: rightPart
          }
        ]
      };
    },
    nodeError(_, node) {
      return {
        type: "element",
        tagName: "span",
        properties: {
          class: "twoslash-error"
        },
        children: [node]
      };
    },
    lineError(error) {
      return [
        {
          type: "element",
          tagName: "div",
          properties: {
            class: "twoslash-meta-line twoslash-error-line"
          },
          children: [
            {
              type: "text",
              value: error.text
            }
          ]
        }
      ];
    },
    lineCustomTag(tag) {
      return [
        {
          type: "element",
          tagName: "div",
          properties: {
            class: `twoslash-tag-line twoslash-tag-${tag.name}-line`
          },
          children: [
            {
              type: "text",
              value: tag.text || ""
            }
          ]
        }
      ];
    },
    nodesHighlight(_, nodes) {
      return [
        {
          type: "element",
          tagName: "span",
          properties: {
            class: "twoslash-highlighted"
          },
          children: nodes
        }
      ];
    }
  };
}
var regexType = /^[A-Z][a-zA-Z0-9_]*(\<[^\>]*\>)?:/;
var regexFunction = /^[a-zA-Z0-9_]*\(/;
function processHoverInfo(type) {
  let content = type.replace(/^\(([\w-]+?)\)\s+/gm, "").replace(/\nimport .*$/, "").replace(/^(interface|namespace) \w+$/gm, "").trim();
  if (content.match(regexType))
    content = `type ${content}`;
  else if (content.match(regexFunction))
    content = `function ${content}`;
  return content;
}

// node_modules/vocs/_lib/vite/plugins/shiki/twoslasher.js
import { createTwoslasher } from "file:///home/ptngs/Git/cnc_website/node_modules/twoslash/dist/index.mjs";

// node_modules/vocs/_lib/vite/utils/cache.js
import { dirname as dirname2, resolve as resolve5 } from "node:path";
import { fileURLToPath as fileURLToPath2 } from "node:url";
import { default as fs2 } from "file:///home/ptngs/Git/cnc_website/node_modules/fs-extra/lib/index.js";
var __vite_injected_original_import_meta_url2 = "file:///home/ptngs/Git/cnc_website/node_modules/vocs/_lib/vite/utils/cache.js";
var __dirname2 = dirname2(fileURLToPath2(__vite_injected_original_import_meta_url2));
var search = create("search");
var twoslash = create("twoslash");
function create(key, { cacheDir = resolve5(__dirname2, "../.vocs/cache") } = {}) {
  let cache2 = /* @__PURE__ */ new Map();
  let hydrated = false;
  function hydrate() {
    const data = fs2.readJSONSync(resolve5(cacheDir, `${key}.json`), { throws: false });
    if (data)
      cache2 = new Map(JSON.parse(data));
    hydrated = true;
  }
  function save() {
    fs2.ensureDirSync(cacheDir);
    fs2.writeJSONSync(resolve5(cacheDir, `${key}.json`), JSON.stringify([...cache2]));
  }
  return {
    get(key2) {
      if (!hydrated)
        hydrate();
      return cache2.get(key2);
    },
    set(key2, value) {
      if (!hydrated)
        hydrate();
      cache2.set(key2, value);
      save();
    },
    delete(key2) {
      if (!hydrated)
        hydrate();
      cache2.delete(key2);
      save();
    },
    clear() {
      cache2.clear();
      save();
    }
  };
}

// node_modules/vocs/_lib/vite/utils/hash.js
import { createHash } from "node:crypto";
function hash(text, length) {
  let hash2 = createHash("sha256").update(text).digest("hex");
  if (length)
    hash2 = hash2.substring(0, length);
  return hash2;
}

// node_modules/vocs/_lib/vite/plugins/shiki/twoslasher.js
var twoslasher_ = createTwoslasher();
function twoslasher(...parameters) {
  const codeHash = hash(parameters[0]);
  if (twoslash.get(codeHash))
    return twoslash.get(codeHash);
  try {
    const twoslash2 = twoslasher_(...parameters);
    twoslash.set(codeHash, twoslash2);
    return twoslash2;
  } catch (e) {
    const error = e;
    const lines = parameters[0].split("\n");
    const line = lines.length - 1;
    return {
      code: parameters[0],
      nodes: [
        {
          filename: "",
          level: "error",
          type: "error",
          code: 0,
          length: 100,
          start: 0,
          line,
          character: 0,
          text: error.message.replace("\n", ""),
          id: ""
        }
      ],
      // @ts-expect-error
      meta: {},
      queries: [],
      completions: [],
      errors: [],
      highlights: [],
      hovers: [],
      tags: []
    };
  }
}

// node_modules/vocs/_lib/vite/plugins/mdx.js
var defaultTwoslashOptions = defaultTwoslashOptions_();
var getRemarkPlugins = ({ markdown } = {}) => [
  remarkDirective,
  remarkInferFrontmatter,
  remarkFrontmatter,
  remarkMdxFrontmatter,
  remarkGfm,
  remarkLinks,
  remarkBlogPosts,
  remarkCallout,
  remarkCode,
  remarkCodeGroup,
  remarkDetails,
  remarkFilename,
  remarkSponsors,
  remarkSteps,
  remarkStrongBlock,
  remarkSubheading,
  remarkTwoslash,
  remarkAuthors,
  ...markdown?.remarkPlugins || []
];
var getRehypePlugins = ({ markdown, rootDir = "", twoslash: twoslash2 = {} } = {}) => [
  rehypeSlug,
  [
    rehypeShiki,
    {
      transformers: [
        transformerLineNumbers(),
        transformerNotationDiff(),
        transformerNotationFocus(),
        transformerNotationHighlight(),
        transformerNotationWordHighlight(),
        transformerNotationInclude({ rootDir }),
        transformerEmptyLine(),
        transformerTagLine(),
        transformerTitle(),
        twoslash2 !== false ? transformerTwoslash({
          explicitTrigger: true,
          renderer: twoslashRenderer(),
          twoslasher,
          twoslashOptions: {
            ...twoslash2,
            customTags: [
              ...defaultTwoslashOptions.customTags ?? [],
              ...twoslash2.customTags ?? []
            ],
            compilerOptions: {
              ...twoslash2.compilerOptions ?? {},
              ...defaultTwoslashOptions.compilerOptions
            }
          }
        }) : null,
        transformerSplitIdentifiers()
      ].filter(Boolean),
      themes: {
        dark: "github-dark-dimmed",
        light: "github-light"
      },
      ...markdown?.code
    }
  ],
  [rehypeInlineShiki, markdown?.code],
  rehypeShikiDisplayNotation,
  [
    rehypeAutolinkHeadings,
    {
      behavior: "append",
      content() {
        return [h4("div", { dataAutolinkIcon: true })];
      }
    }
  ],
  ...markdown?.rehypePlugins || []
];
async function mdx() {
  const { config } = await resolveVocsConfig();
  const { markdown, rootDir, twoslash: twoslash2 } = config;
  const remarkPlugins3 = getRemarkPlugins({ markdown });
  const rehypePlugins2 = getRehypePlugins({ markdown, rootDir, twoslash: twoslash2 });
  return [
    mdxPlugin({
      providerImportSource: "vocs/mdx-react",
      remarkPlugins: remarkPlugins3,
      rehypePlugins: rehypePlugins2
    })
  ];
}

// node_modules/vocs/_lib/vite/plugins/resolve-vocs-modules.js
import { dirname as dirname3, extname, resolve as resolve6 } from "node:path";
import { fileURLToPath as fileURLToPath3 } from "node:url";
import {} from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";
var __vite_injected_original_import_meta_url3 = "file:///home/ptngs/Git/cnc_website/node_modules/vocs/_lib/vite/plugins/resolve-vocs-modules.js";
var __dirname3 = dirname3(fileURLToPath3(__vite_injected_original_import_meta_url3));
function resolveVocsModules() {
  let config;
  return {
    name: "resolve-vocs",
    async buildStart() {
      config = (await resolveVocsConfig()).config;
    },
    transform(code_, id2) {
      let code = code_;
      if (id2.startsWith(resolve6(config.rootDir))) {
        if ([".js", ".jsx", ".js", ".js", ".md", ".mdx"].includes(extname(id2))) {
          code = code.replace(/import (.*) from ("|')vocs("|')/g, `import $1 from $2${resolve6(__dirname3, "../..")}$3`);
          code = code.replace(/import (.*) from ("|')vocs\/components("|')/g, `import $1 from $2${resolve6(__dirname3, "../../components")}$3`);
        }
      }
      return code;
    }
  };
}

// node_modules/vocs/_lib/vite/plugins/search.js
import { existsSync as existsSync2, readFileSync as readFileSync4 } from "node:fs";
import { relative as relative2, resolve as resolve8 } from "node:path";
import MiniSearch2 from "file:///home/ptngs/Git/cnc_website/node_modules/minisearch/dist/es/index.js";
import { createLogger as createLogger2 } from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";

// node_modules/vocs/_lib/vite/utils/search.js
import { readFileSync as readFileSync3 } from "node:fs";
import { join, relative, resolve as resolve7 } from "node:path";
import { pathToFileURL } from "url";
import { compile, run } from "file:///home/ptngs/Git/cnc_website/node_modules/@mdx-js/mdx/index.js";
import debug_ from "file:///home/ptngs/Git/cnc_website/node_modules/debug/src/index.js";
import { default as fs3 } from "file:///home/ptngs/Git/cnc_website/node_modules/fs-extra/lib/index.js";
import { globby } from "file:///home/ptngs/Git/cnc_website/node_modules/globby/index.js";
import MiniSearch from "file:///home/ptngs/Git/cnc_website/node_modules/minisearch/dist/es/index.js";
import { Fragment } from "file:///home/ptngs/Git/cnc_website/node_modules/react/index.js";
import { renderToStaticMarkup } from "file:///home/ptngs/Git/cnc_website/node_modules/react-dom/server.node.js";
import * as runtime from "file:///home/ptngs/Git/cnc_website/node_modules/react/jsx-runtime.js";

// node_modules/vocs/_lib/vite/utils/slash.js
function slash(p) {
  return p.replace(/\\/g, "/");
}

// node_modules/vocs/_lib/vite/utils/search.js
var debug = debug_("vocs:search");
async function buildIndex({ baseDir }) {
  const pagesPaths = await globby(`${resolve7(baseDir, "pages")}/**/*.{md,mdx}`);
  const documents = await Promise.all(pagesPaths.map(async (pagePath) => {
    const mdx2 = readFileSync3(pagePath, "utf-8");
    const key = `index.${hash(pagePath)}`;
    const pageCache = search.get(key) ?? {};
    if (pageCache.mdx === mdx2)
      return pageCache.document;
    const html = await processMdx(mdx2);
    const sections = splitPageIntoSections(html);
    if (sections.length === 0) {
      search.set(key, { mdx: mdx2, document: [] });
      return [];
    }
    const fileId = getDocId(baseDir, pagePath);
    const relFile = slash(relative(baseDir, fileId));
    const href = relFile.replace(relative(baseDir, resolve7(baseDir, "pages")), "").replace(/\.(.*)/, "");
    const document = sections.map((section) => ({
      href: `${href}#${section.anchor}`,
      html: section.html,
      id: `${fileId}#${section.anchor}`,
      isPage: section.isPage,
      text: section.text,
      title: section.titles.at(-1),
      titles: section.titles.slice(0, -1)
    }));
    search.set(key, { mdx: mdx2, document });
    return document;
  }));
  const index = new MiniSearch({
    fields: ["title", "titles", "text"],
    storeFields: ["href", "html", "isPage", "text", "title", "titles"]
    // TODO
    // ...options.miniSearch?.options,
  });
  await index.addAllAsync(documents.flat());
  debug(`vocs:search > indexed ${pagesPaths.length} files`);
  return index;
}
function saveIndex(outDir, index) {
  const json = index.toJSON();
  const hash_ = search.get("hash") || hash(JSON.stringify(json), 8);
  const dir = join(outDir, ".vocs");
  fs3.ensureDirSync(dir);
  fs3.writeJSONSync(join(dir, `search-index-${hash_}.json`), json);
  return hash_;
}
var remarkPlugins = getRemarkPlugins();
var rehypePlugins = getRehypePlugins({ twoslash: false });
async function processMdx(file) {
  try {
    const compiled = await compile(file, {
      baseUrl: pathToFileURL(file).href,
      outputFormat: "function-body",
      remarkPlugins,
      rehypePlugins
    });
    const { default: MDXContent } = await run(compiled, { ...runtime, Fragment });
    const html = renderToStaticMarkup(MDXContent({
      // TODO: Pass components - vanilla extract and virtual module errors
      // components,
    }));
    return html;
  } catch (error) {
    return "";
  }
}
function getDocId(baseDir, file) {
  const relFile = slash(relative(baseDir, file));
  let id2 = slash(join(baseDir, relFile));
  id2 = id2.replace(/(^|\/)index\.(mdx|html)?$/, "$1");
  return id2;
}
var headingRegex = /<h(\d*).*?>(.*?<a.*? href=".*?".*?>.*?<\/a>)<\/h\1>/gi;
var headingContentRegex = /(.*?)<a.*? href=".*?#(.*?)".*?>.*?<\/a>/i;
function splitPageIntoSections(html) {
  const result = html.split(headingRegex);
  result.shift();
  let parentTitles = [];
  const sections = [];
  for (let i = 0; i < result.length; i += 3) {
    const level = parseInt(result[i]) - 1;
    const heading = result[i + 1];
    const headingResult = headingContentRegex.exec(heading);
    const title = clearHtmlTags(headingResult?.[1] ?? "").trim();
    const anchor = headingResult?.[2] ?? "";
    const content = result[i + 2];
    if (!title || !content)
      continue;
    const titles = parentTitles.slice(0, level);
    titles[level] = title;
    sections.push({
      anchor,
      html: content,
      isPage: i === 0,
      titles,
      text: getSearchableText(content)
    });
    if (level === 0)
      parentTitles = [title];
    else
      parentTitles[level] = title;
  }
  return sections;
}
function getSearchableText(content) {
  return clearHtmlTags(content);
}
function clearHtmlTags(str) {
  return str.replace(/<[^>]*>/g, "");
}

// node_modules/vocs/_lib/vite/plugins/search.js
var virtualModuleId = "virtual:searchIndex";
var resolvedVirtualModuleId = `\0${virtualModuleId}`;
var logger2 = createLogger2();
var dev = process.env.NODE_ENV === "development";
async function search2() {
  const { config } = await resolveVocsConfig();
  let hash2;
  let index;
  let searchPromise;
  let server;
  let viteConfig;
  function onIndexUpdated() {
    if (!server)
      return;
    server.moduleGraph.onFileChange(resolvedVirtualModuleId);
    const mod = server.moduleGraph.getModuleById(resolvedVirtualModuleId);
    if (!mod)
      return;
    server.ws.send({
      type: "update",
      updates: [
        {
          acceptedPath: mod.url,
          path: mod.url,
          timestamp: Date.now(),
          type: "js-update"
        }
      ]
    });
  }
  return {
    name: "vocs:search",
    config(config2) {
      viteConfig = config2;
      return {
        optimizeDeps: {
          include: ["vocs > minisearch"]
        }
      };
    },
    async buildStart() {
      if (!viteConfig?.build?.ssr) {
        const buildSearchIndex = search.get("buildSearchIndex");
        if (!dev && !buildSearchIndex)
          return;
        searchPromise = buildIndex({ baseDir: config.rootDir });
        if (dev) {
          logger2.info("building search index...", { timestamp: true });
          index = await searchPromise;
          onIndexUpdated();
          searchPromise = void 0;
        }
      }
    },
    async configureServer(devServer) {
      server = devServer;
    },
    resolveId(id2) {
      if (id2 !== virtualModuleId)
        return;
      return resolvedVirtualModuleId;
    },
    async load(id2) {
      if (id2 !== resolvedVirtualModuleId)
        return;
      if (dev)
        return `export const getSearchIndex = async () => ${JSON.stringify(JSON.stringify(index))}`;
      if (searchPromise) {
        index = await searchPromise;
        searchPromise = void 0;
        hash2 = saveIndex(viteConfig?.build?.outDir, index);
      } else if (!hash2) {
        if (!viteConfig?.build?.ssr)
          hash2 = hash(Date.now().toString(), 8);
        else
          hash2 = search.get("hash");
      }
      search.set("hash", hash2);
      return `export const getSearchIndex = async () => JSON.stringify(await ((await fetch("${config.basePath}/.vocs/search-index-${hash2}.json")).json()))`;
    },
    async handleHotUpdate({ file }) {
      if (!file.endsWith(".md") && !file.endsWith(".mdx"))
        return;
      const fileId = getDocId(config.rootDir, file);
      if (!existsSync2(file))
        return;
      const mdx2 = readFileSync4(file, "utf-8");
      const rendered = await processMdx(mdx2);
      const sections = splitPageIntoSections(rendered);
      if (sections.length === 0)
        return;
      const pagesDirPath = resolve8(config.rootDir, "pages");
      const relativePagesDirPath = relative2(config.rootDir, pagesDirPath);
      for (const section of sections) {
        const id2 = `${fileId}#${section.anchor}`;
        if (index.has(id2)) {
          index.discard(id2);
        }
        const relFile = slash(relative2(config.rootDir, fileId));
        const href = relFile.replace(relativePagesDirPath, "").replace(/\.(.*)/, "");
        index.add({
          href: `${href}#${section.anchor}`,
          html: section.html,
          id: id2,
          isPage: section.isPage,
          text: section.text,
          title: section.titles.at(-1),
          titles: section.titles.slice(0, -1)
        });
      }
      debug("vocs:search > updated", file);
      onIndexUpdated();
    }
  };
}

// node_modules/vocs/_lib/vite/plugins/virtual-blog.js
import { relative as relative3, resolve as resolve9 } from "node:path";
import { default as fs4 } from "file:///home/ptngs/Git/cnc_website/node_modules/fs-extra/lib/index.js";
import { globby as globby2 } from "file:///home/ptngs/Git/cnc_website/node_modules/globby/index.js";
import remarkParse from "file:///home/ptngs/Git/cnc_website/node_modules/remark-parse/index.js";
import { unified } from "file:///home/ptngs/Git/cnc_website/node_modules/unified/index.js";
import {} from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";
import { parse } from "file:///home/ptngs/Git/cnc_website/node_modules/yaml/dist/index.js";
var remarkPlugins2 = getRemarkPlugins();
function virtualBlog() {
  const virtualModuleId2 = "virtual:blog";
  const resolvedVirtualModuleId2 = `\0${virtualModuleId2}`;
  return {
    name: "blog",
    resolveId(id2) {
      if (id2 === virtualModuleId2)
        return resolvedVirtualModuleId2;
      return;
    },
    async load(id2) {
      if (id2 === resolvedVirtualModuleId2) {
        const { config } = await resolveVocsConfig();
        const { blogDir, rootDir } = config;
        const blogDir_resolved = resolve9(rootDir, blogDir);
        const files = await globby2(`${blogDir_resolved}/**/*.{md,mdx}`);
        const posts = [];
        for (const file of files) {
          if (file.startsWith(`${blogDir_resolved}/index`))
            continue;
          const contents = fs4.readFileSync(file, "utf-8");
          const parser = unified().use(remarkParse);
          for (const plugin of remarkPlugins2) {
            parser.use(plugin);
          }
          const ast = parser.parse(contents);
          const frontmatter = (() => {
            let frontmatter2 = {};
            for (const node of ast.children) {
              if (node.type === "yaml") {
                frontmatter2 = parse(node.value);
                break;
              }
            }
            return frontmatter2;
          })();
          let description = (() => {
            if (frontmatter.description)
              return frontmatter.description;
            for (const node of ast.children) {
              if (node.type === "paragraph") {
                return node.children[0].value;
              }
            }
            return "";
          })();
          if (description.length > 200)
            description = `${description.slice(0, 200)}\u2026`;
          const title = (() => {
            if (frontmatter.title)
              return frontmatter.title;
            for (const node of ast.children) {
              if (node.type === "heading" && node.depth === 1) {
                return node.children[0].value;
              }
            }
            return "";
          })();
          const date = (() => {
            if (frontmatter.date)
              return frontmatter.date;
            const { mtime } = fs4.statSync(file);
            return mtime.toISOString();
          })();
          const path = `/${relative3(resolve9(rootDir, "pages"), file).replace(/\.(md|mdx)$/, "")}`;
          posts.push({
            authors: frontmatter.authors,
            date,
            description,
            path,
            title
          });
        }
        posts.sort((a, b) => {
          if (!a.date)
            return 1;
          if (!b.date)
            return -1;
          return new Date(b.date).getTime() - new Date(a.date).getTime();
        });
        return `export const posts = ${JSON.stringify(posts)};`;
      }
      return;
    },
    handleHotUpdate() {
      return;
    }
  };
}

// node_modules/vocs/_lib/vite/plugins/virtual-config.js
import {} from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";
function virtualConfig() {
  const virtualModuleId2 = "virtual:config";
  const resolvedVirtualModuleId2 = `\0${virtualModuleId2}`;
  return {
    name: "vocs-config",
    async configureServer(server) {
      const { configPath } = await resolveVocsConfig();
      if (configPath) {
        server.watcher.add(configPath);
        server.watcher.on("change", async (path) => {
          if (path !== configPath)
            return;
          server.ws.send("vocs:config", (await resolveVocsConfig()).config);
        });
      }
    },
    resolveId(id2) {
      if (id2 === virtualModuleId2)
        return resolvedVirtualModuleId2;
      return;
    },
    async load(id2) {
      if (id2 === resolvedVirtualModuleId2) {
        const { config } = await resolveVocsConfig();
        return `export const config = ${JSON.stringify(config)}`;
      }
      return;
    },
    handleHotUpdate() {
      return;
    }
  };
}

// node_modules/vocs/_lib/vite/plugins/virtual-consumer-components.js
import { existsSync as existsSync3 } from "node:fs";
import { resolve as resolve10 } from "node:path";
import {} from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";
function virtualConsumerComponents() {
  const virtualModuleId2 = "virtual:consumer-components";
  const resolvedVirtualModuleId2 = `\0${virtualModuleId2}`;
  return {
    name: "routes",
    resolveId(id2) {
      if (id2 === virtualModuleId2)
        return resolvedVirtualModuleId2;
      return;
    },
    async load(id2) {
      if (id2 !== resolvedVirtualModuleId2)
        return;
      const { config } = await resolveVocsConfig();
      const { rootDir } = config;
      return `
        ${exportComponent(resolve10(rootDir, "layout.js"), "Layout")}
        ${exportComponent(resolve10(rootDir, "footer.js"), "Footer")}
      `;
    }
  };
}
function exportComponent(path, name) {
  if (existsSync3(path))
    return `export { default as ${name} } from "${path}";`;
  return `export const ${name} = ({ children }) => children;`;
}

// node_modules/vocs/_lib/vite/plugins/virtual-routes.js
import { extname as extname2, resolve as resolve11 } from "node:path";
import { globby as globby3 } from "file:///home/ptngs/Git/cnc_website/node_modules/globby/index.js";

// node_modules/vocs/_lib/vite/utils/getGitTimestamp.js
import { spawn } from "file:///home/ptngs/Git/cnc_website/node_modules/cross-spawn/index.js";
import fs5 from "file:///home/ptngs/Git/cnc_website/node_modules/fs-extra/lib/index.js";
import { basename, dirname as dirname4 } from "path";
var cache = /* @__PURE__ */ new Map();
function getGitTimestamp(file) {
  const cached = cache.get(file);
  if (cached)
    return cached;
  return new Promise((resolve13, reject) => {
    const cwd = dirname4(file);
    if (!fs5.existsSync(cwd))
      return resolve13(0);
    const fileName = basename(file);
    const child = spawn("git", ["log", "-1", '--pretty="%ai"', fileName], {
      cwd
    });
    let output = "";
    child.stdout.on("data", (d) => output += String(d));
    child.on("close", () => {
      const timestamp = +new Date(output);
      cache.set(file, timestamp);
      resolve13(timestamp);
    });
    child.on("error", reject);
  });
}

// node_modules/vocs/_lib/vite/plugins/virtual-routes.js
function virtualRoutes() {
  const virtualModuleId2 = "virtual:routes";
  const resolvedVirtualModuleId2 = `\0${virtualModuleId2}`;
  let glob;
  let paths = [];
  return {
    name: "routes",
    async configureServer(server) {
      const { config } = await resolveVocsConfig();
      const { rootDir } = config;
      const pagesPath = resolve11(rootDir, "pages");
      if (pagesPath) {
        server.watcher.add(pagesPath);
        server.watcher.on("add", () => server.restart());
        server.watcher.on("unlink", () => server.restart());
      }
    },
    resolveId(id2) {
      if (id2 === virtualModuleId2)
        return resolvedVirtualModuleId2;
      return;
    },
    async load(id2) {
      if (id2 === resolvedVirtualModuleId2) {
        const { config } = await resolveVocsConfig();
        const { rootDir } = config;
        const pagesPath = resolve11(rootDir, "pages");
        let code = "export const routes = [";
        for (const path of paths) {
          const type = extname2(path).match(/(mdx|md)/) ? "mdx" : "jsx";
          const replacer = glob.split("*")[0];
          const filePath = path.replace(`${pagesPath}/`, "");
          const fileGitTimestamp = await getGitTimestamp(path);
          let lastUpdatedAt;
          if (fileGitTimestamp)
            lastUpdatedAt = fileGitTimestamp;
          let pagePath = path.replace(replacer, "").replace(/\.(.*)/, "");
          if (pagePath.endsWith("index"))
            pagePath = pagePath.replace("index", "").replace(/\/$/, "");
          code += `  { lazy: () => import("${path}"), path: "/${pagePath}", type: "${type}", filePath: "${filePath}", lastUpdatedAt: ${lastUpdatedAt} },`;
          if (pagePath)
            code += `  { lazy: () => import("${path}"), path: "/${pagePath}.html", type: "${type}", filePath: "${filePath}", lastUpdatedAt: ${lastUpdatedAt} },`;
        }
        code += "]";
        return code;
      }
      return;
    },
    async buildStart() {
      const { config } = await resolveVocsConfig();
      const { rootDir } = config;
      const pagesPath = resolve11(rootDir, "pages");
      glob = `${pagesPath}/**/*.{md,mdx,ts,tsx,js,jsx}`;
      paths = await globby3(glob);
    },
    handleHotUpdate() {
      return;
    }
  };
}

// node_modules/vocs/_lib/vite/plugins/virtual-styles.js
import { existsSync as existsSync4 } from "node:fs";
import { dirname as dirname5, resolve as resolve12 } from "node:path";
import { fileURLToPath as fileURLToPath4 } from "node:url";
import { default as fs6 } from "file:///home/ptngs/Git/cnc_website/node_modules/fs-extra/lib/index.js";
import {} from "file:///home/ptngs/Git/cnc_website/node_modules/vite/dist/node/index.js";
var __vite_injected_original_import_meta_url4 = "file:///home/ptngs/Git/cnc_website/node_modules/vocs/_lib/vite/plugins/virtual-styles.js";
var __dirname4 = dirname5(fileURLToPath4(__vite_injected_original_import_meta_url4));
function virtualStyles() {
  const virtualModuleId2 = "virtual:styles";
  const resolvedVirtualModuleId2 = `\0${virtualModuleId2}`;
  return {
    name: "styles",
    async buildStart() {
      const { config } = await resolveVocsConfig();
      const { theme } = config;
      createThemeStyles({ theme });
    },
    async configureServer(server) {
      const { configPath } = await resolveVocsConfig();
      if (configPath) {
        server.watcher.add(configPath);
        server.watcher.on("change", async (path) => {
          if (path !== configPath)
            return;
          const { config } = await resolveVocsConfig();
          const { theme } = config;
          createThemeStyles({ theme });
        });
      }
    },
    resolveId(id2) {
      if (id2 === virtualModuleId2)
        return resolvedVirtualModuleId2;
      return;
    },
    async load(id2) {
      if (id2 !== resolvedVirtualModuleId2)
        return;
      const { config } = await resolveVocsConfig();
      const { rootDir } = config;
      const themeStyles = resolve12(__dirname4, "../.vocs/theme.css");
      const rootStyles = resolve12(rootDir, "styles.css");
      let code = "";
      if (existsSync4(themeStyles))
        code += `import "${themeStyles}";`;
      if (existsSync4(rootStyles))
        code += `import "${rootStyles}";`;
      return code;
    }
  };
}
function createThemeStyles({ theme }) {
  const themeFile = resolve12(__dirname4, "../.vocs/theme.css");
  if (fs6.existsSync(themeFile))
    fs6.rmSync(themeFile);
  if (!theme)
    return;
  fs6.createFileSync(themeFile);
  function createVars(variables2) {
    let code = "";
    for (const scope in variables2) {
      for (const name in variables2[scope]) {
        const value = variables2[scope][name];
        if (typeof value === "string")
          code += `:root { --vocs-${scope}_${name}: ${value}; }
:root.dark { --vocs-${scope}_${name}: ${value}; }
`;
        else {
          if (value?.light)
            code += `:root { --vocs-${scope}_${name}: ${value.light}; }
`;
          if (value?.dark)
            code += `:root.dark { --vocs-${scope}_${name}: ${value.dark}; }
`;
        }
      }
    }
    return code;
  }
  const { accentColor, variables } = theme;
  if (accentColor)
    fs6.appendFileSync(themeFile, createVars({
      color: {
        backgroundAccent: accentColor.backgroundAccent,
        backgroundAccentHover: accentColor.backgroundAccentHover,
        backgroundAccentText: accentColor.backgroundAccentText,
        borderAccent: accentColor.borderAccent,
        textAccent: accentColor.textAccent,
        textAccentHover: accentColor.textAccentHover
      }
    }));
  if (variables)
    fs6.appendFileSync(themeFile, createVars(variables));
}

// node_modules/vocs/_lib/vite/vite.config.js
var vite_config_default = defineConfig2(async () => {
  const { config } = await resolveVocsConfig();
  const viteConfig = config.vite ?? {};
  return {
    ...viteConfig,
    build: {
      ...viteConfig?.build,
      cssCodeSplit: false
    },
    optimizeDeps: {
      ...viteConfig.optimizeDeps ?? {},
      include: [
        "acorn-jsx",
        "chroma-js",
        "debug",
        "extend",
        "mark.js",
        "react",
        "react-dom",
        "react-dom/client",
        "react-helmet",
        "style-to-object",
        ...viteConfig.optimizeDeps?.include ?? []
      ],
      exclude: ["vocs", ...viteConfig.optimizeDeps?.exclude ?? []]
    },
    plugins: [
      splitVendorChunkPlugin(),
      virtualConfig(),
      react(),
      vanillaExtractPlugin({
        identifiers({ filePath, debugId }) {
          const scope = basename2(filePath).replace(".css.js", "");
          return `vocs_${scope}${debugId ? `_${debugId}` : ""}`;
        },
        emitCssInSsr: true
      }),
      css(),
      mdx(),
      resolveVocsModules(),
      search2(),
      virtualBlog(),
      virtualConsumerComponents(),
      virtualRoutes(),
      virtualStyles(),
      ...viteConfig.plugins ?? []
    ],
    server: {
      ...viteConfig.server,
      fs: {
        ...viteConfig.server?.fs,
        allow: ["..", ...viteConfig.server?.fs?.allow ?? []]
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
